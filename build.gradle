plugins {
    id "java"
    id "application"
    id "jacoco"
    id "com.github.kt3k.coveralls" version "2.6.3"
    id "org.openjfx.javafxplugin" version "0.0.8"
    id 'org.beryx.jlink' version '2.21.0'
}

apply plugin : "java"

repositories {
    mavenLocal()
    mavenCentral()
}

targetCompatibility = "11"
sourceCompatibility = "11"

compileJava.options.encoding = 'UTF-8'

processResources {
    filesMatching('config.properties') {
        expand(project.properties)
    }
}

wrapper {
    gradleVersion = '6.5'
}

application {
    mainClassName = "com.zds.zw.Launcher"
    mainModule = "zestwriter"
}

// Configures plugin
javafx {
    version = '13'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

// set jpackage installerType based on OS
def os = org.gradle.internal.os.OperatingSystem.current()
def jPkgInstallerType = ''
if (os.isLinux()) {
    jPkgInstallerType = 'deb'
} else if (os.isMacOsX()) {
    jPkgInstallerType = 'pkg'
} else if (os.isWindows()) {
    jPkgInstallerType = 'msi'
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    imageZip = project.file("${buildDir}/distributions/zest-writer-${javafx.platform.classifier}.zip")

    launcher {
        name = 'zestwriter'
        moduleName = 'zestwriter'
    }

    forceMerge 'javafx', 'log4j-api', 'jackson'

    mergedModule {
        excludeUses 'com.sun.webkit.plugin.PluginHandler'
    }

    jpackage {
        // can be set with BADASS_JLINK_JPACKAGE_HOME
        //jpackageHome = "./jdk-14_linux-x64_bin/jdk-14"

        outputDir = "installer"
        imageName = 'zestwriter'
        skipInstaller = false
        installerName = 'zestwriter'
        installerType = "${version}"
        appVersion = "2.0.0-beta"
        installerOptions = [
                '--description', "Editeur de texte zMarkdown",
                '--copyright', 'Copyrigth 2018-2020'
        ]
        if (installerType == 'msi') {
            //imageOptions += ['--icon', 'src/main/resources/com/zds/zw/logo/logo-16.png']
            installerOptions += [
                    '--win-per-user-install',
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut'
            ]
        }
        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', 'src/main/resources/com/zds/zw/logo/logo-256.png']
            installerOptions += [
                    '--linux-menu-group', 'Office',
                    '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                    '--linux-deb-maintainer', 'contact@firm1.eu'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                    '--linux-rpm-license-type', 'GPLv3'
            ]
        }
    }
}

task dist {
    dependsOn clean, jlinkZip
    description "Calls clean and then jlinkZip [default]"
}

defaultTasks 'dist'

dependencies {
    testImplementation 'junit:junit:4.13-rc-2'

    implementation (group: 'de.julielab', name: 'aliasi-lingpipe', version: '4.1.2-JL1.0') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.13.1'
    // jackson
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.1'

    // logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4jVersion}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4jVersion}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4jVersion}"

    // icons
    implementation group: 'de.jensd', name: 'fontawesomefx-commons', version: "${faVersion}"
    implementation group: 'de.jensd', name: 'fontawesomefx-commons', version: "${faVersion}"
    implementation group: 'de.jensd', name: 'fontawesomefx-materialdesignfont', version: "2.0.26-${faVersion}"

    // utils
    implementation group: 'org.zeroturnaround', name: 'zt-zip', version: '1.14'
    implementation group: 'org.fxmisc.wellbehaved', name: 'wellbehavedfx', version: '0.3.3'
    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.0.2'
    implementation group: 'commons-io', name: 'commons-io', version: '2.7'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.8'

    // graal vm
    implementation group: 'org.graalvm.sdk', name: 'graal-sdk', version: "${graalVersion}"
    implementation group: 'org.graalvm.js', name: 'js', version: "${graalVersion}"
    implementation group: 'org.graalvm.js', name: 'js-scriptengine', version: "${graalVersion}"
    implementation group: 'org.graalvm.tools', name: 'chromeinspector', version: "${graalVersion}"
}

test {
    filter {
        includeTestsMatching "*Test*"
    }

    systemProperty "zw.username", System.getProperty("zw.username")
    systemProperty "zw.password", System.getProperty("zw.password")
    systemProperty "zw.github_user", System.getProperty("zw.github_user")
    systemProperty "zw.github_token", System.getProperty("zw.github_token")
    systemProperty "file.encoding", "UTF-8"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

tasks.check.dependsOn jacocoTestReport

task doc (type:Exec) {
    workingDir './doc'
    commandLine 'make', 'html', 'serve'
}
